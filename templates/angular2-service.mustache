import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import {
    {{#definitions}}
    {{name}}{{^last}},{{/last}}
    {{/definitions}}
} from './models';
import 'rxjs/Rx';
import { map } from 'rxjs/operators';
import { Observable } from 'rxjs';

@Injectable()
/**
 * Created with angular2-swagger-client-generator v{{&version}}
 */
export class ApiClientService {
    public domain: string;
    private token: string = null;
    private globalHeaders: Map<string,string> = new Map();


    constructor(public http: HttpClient) {
    {{#domain}}
        this.domain = '{{&.}}';
    {{/domain}}
    {{^domain}}
        this.domain = '';
    {{/domain}}
    }

    /**
     * set access token
     * @param {string} token access token
     */
    public setToken(token: string): void {
        this.token = token;
    }

    /**
     * get access token
     * return {string} access token
     */
    public getToken(): string {
        return this.token;
    }

    /**
     * Add a header that will be attached to all requests that are made.
     *
     * @param name The name of the header; e.g. `Content-Type`
     * @param value The value of the header; e.g. in the case above
     * it could be `application/json`
     */
    public addGlobalHeader(name: string, value: string) {
        this.globalHeaders.set(name, value);
    }

    /**
     * Removes a named header from the global list.
     *
     * @param name The name of the parameters that will be removed from
     * the headers list
     */
    public removeGlobalHeader(name: string) {
        this.globalHeaders.delete(name);
    }

    /**
     * Get the map of header values that are currently being sent with
     * every request.
     *
     * @returns {Map<string, string>} The map of header name to value
     */
    public getGlobalHeadersMap(): Map<string, string> {
        return this.globalHeaders;
    }

{{#methods}}

    /**
     {{#summaryLines}}
     * {{&.}}
     {{/summaryLines}}
     * @method {{angular2httpMethod}}
     * @name {{&methodName}}
     {{#parameters}}
     {{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
     {{/parameters}}
     * @return {Observable<HttpResponse<Object>>}
     */
    public {{&methodName}}({{#parameters}}{{&name}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}): Observable<any> {
        let params: any = new HttpParams();
        let headers: any = new HttpHeaders();

        // append global headers first, in case they need overriding
        this.globalHeaders.forEach((value: string, name: string) => {
            headers = headers.append(name, value);
        });

        headers = headers.append('Content-Type', 'application/json');

        // append auth token if set
        if (this.token) {
            headers = headers.append('Authorization', this.token);
        }
{{#parameters}}
			{{#isQueryParameter}}
                {{#isSingleton}}
        params = params.set('{{&name}}', {{&singleton}});
                {{/isSingleton}}
			    {{^isSingleton}}
			        {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
            if (new RegExp('{{&pattern}}').test(parameterName)) {
                params = params.set(parameterName, parameters[parameterName]);
            }
        });
                    {{/isPatternType}}
			        {{^isPatternType}}
        if ({{&name}}) {
            params = params.set('{{&name}}', {{&name}});
        }
                    {{/isPatternType}}
                {{/isSingleton}}
            {{/isQueryParameter}}
			{{#isHeaderParameter}}
                {{#isSingleton}}
        headers = headers.append('{{&name}}', '{{&singleton}}');
                {{/isSingleton}}
                {{^isSingleton}}
        if ({{&name}}) {
            headers = headers.append('{{&name}}', {{&name}});
        }
                {{/isSingleton}}
            {{/isHeaderParameter}}
            {{#isFormParameter}}
                {{#isSingleton}}
        form['{{&name}}'] = '{{&singleton}}';
                {{/isSingleton}}
                {{^isSingleton}}
        if ({{&name}} !== undefined) {
            form['{{&name}}'] = {{&name}};
        }
                {{/isSingleton}}
            {{/isFormParameter}}
{{/parameters}}
        let uri: string = `{{&backTickPath}}`;

        return this.http
        .request(
            '{{angular2httpMethod}}',
            this.domain + uri,
            {
                headers: headers,
                {{#isNotGET}}
                body: {{#hasPayload}}JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasPayload}}{{#hasEmptyPayload}}undefined{{/hasEmptyPayload}},
                {{/isNotGET}}
                params: params
            })
        .pipe(map((res: HttpResponse<Object>) => {
            return res;
        }));
    }
{{/methods}}
}
