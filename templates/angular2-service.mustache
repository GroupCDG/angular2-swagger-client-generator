import { Injectable } from '@angular/core';
import { Http, Response, Headers, URLSearchParams } from '@angular/http';
import {
    {{#definitions}}
    {{name}}{{^last}},{{/last}}
    {{/definitions}}
} from './models';
import 'rxjs/Rx';
import { Observable } from 'rxjs/Observable';

@Injectable()
/**
 * Created with angular2-swagger-client-generator v{{&version}}
 */
export class ApiClientService {
    public domain: string;
    private token: string = null;

    constructor(public http: Http) {
    {{#domain}}
        this.domain = '{{&.}}';
    {{/domain}}
    {{^domain}}
        this.domain = '';
    {{/domain}}
    }

    /**
     * set access token
     * @param {string} token access token
     */
    public setToken(token: string): void {
        this.token = token;
    }

    /**
     * get access token
     * return {string} access token
     */
    public getToken(): string {
        return this.token;
    }    

{{#methods}}

    /**
     {{#summaryLines}}
     * {{&.}}
     {{/summaryLines}}
     * @method
     * @name {{&methodName}}
     {{#parameters}}
     {{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
     {{/parameters}}
     * @return {Observable<any>}
     */
    public {{&methodName}}({{#parameters}}{{&name}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}): Observable<any> {
        let queryParameters: any = new URLSearchParams();
        let headers: any = new Headers();
        headers.append('Content-Type', 'application/json');

        // append auth token if set
        if (this.token !== null) {
            headers.append('Authorization', this.token);
        }
{{#parameters}}
			{{#isQueryParameter}}
                {{#isSingleton}}
        queryParameters.set('{{&name}}', {{&singleton}});
                {{/isSingleton}}
			    {{^isSingleton}}
			        {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
            if (new RegExp('{{&pattern}}').test(parameterName)) {
                queryParameters.set(parameterName, parameters[parameterName]);
            }
        });
                    {{/isPatternType}}
			        {{^isPatternType}}
        if ({{&name}} !== undefined) {
            queryParameters.set('{{&name}}', {{&name}});
        }
                    {{/isPatternType}}
                {{/isSingleton}}
            {{/isQueryParameter}}
			{{#isHeaderParameter}}
                {{#isSingleton}}
        headers.append('{{&name}}', '{{&singleton}}');
                {{/isSingleton}}
                {{^isSingleton}}
        if ({{&name}} !== undefined) {
            headers.append('{{&name}}', {{&name}});
        }
                {{/isSingleton}}
            {{/isHeaderParameter}}
            {{#isFormParameter}}
                {{#isSingleton}}
        form['{{&name}}'] = '{{&singleton}}';
                {{/isSingleton}}
                {{^isSingleton}}
        if ({{&name}} !== undefined) {
            form['{{&name}}'] = {{&name}};
        }
                {{/isSingleton}}
            {{/isFormParameter}}
{{/parameters}}
        let uri: string = `{{&backTickPath}}`;

        return this.http
            .{{angular2httpMethod}}(this.domain + uri{{#isNotGET}}{{#hasPayload}}, JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasPayload}}{{#hasEmptyPayload}}, undefined{{/hasEmptyPayload}}{{/isNotGET}}, { headers: headers, search: queryParameters })
            .map((res: Response) => {
                return res;
            });
    }
{{/methods}}
}
