import { Injectable } from '@angular/core';
import { Http, Response, Headers, URLSearchParams } from '@angular/http';
import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';
import 'rxjs/Rx';
import {Observable} from 'rxjs/Observable';


@Injectable()
/**
 * Created with angular2-swagger-client-generator v{{&version}}
 */
export class ApiClientService {
    domain: string;

    constructor(public http: Http) {
    {{#domain}}
        this.domain = '{{&.}}';
    {{/domain}}
    {{^domain}}
        this.domain = '';
    {{/domain}}
    }

{{#methods}}
	/**
	{{#summaryLines}}
    * {{&.}}
    {{/summaryLines}}
    *
	* @method
	* @name {{&methodName}}
	{{#parameters}}
	{{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
	{{/parameters}}
	*
	*/
    public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}) {
        let payload = {};
        let queryParameters = new URLSearchParams();
        let headers = new Headers();
        headers.append('Content-Type', 'application/json');

{{#parameters}}
			{{#isQueryParameter}}
			  {{#isSingleton}}
        queryParameters.set('{{&name}}', {{&singleton}});
        {{/isSingleton}}
			  {{^isSingleton}}
			    {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
            if (new RegExp('{{&pattern}}').test(parameterName)) {
                queryParameters.set(parameterName, parameters[parameterName]);
            }
        });
          {{/isPatternType}}
			    {{^isPatternType}}
        if ({{&camelCaseName}} !== undefined) {
            queryParameters.set('{{&name}}', {{&camelCaseName}});
        }
          {{/isPatternType}}
        {{/isSingleton}}
			{{/isQueryParameter}}

			{{#isHeaderParameter}}
			  {{#isSingleton}}
        headers.append('{{&name}}', '{{&singleton}}');
        {{/isSingleton}}
        {{^isSingleton}}
        if ({{&camelCaseName}} !== undefined) {
            headers.append('{{&name}}', {{&camelCaseName}});
        }
        {{/isSingleton}}
			{{/isHeaderParameter}}
			{{#isBodyParameter}}
        payload['{{&name}}'] = {{&camelCaseName}};
			{{/isBodyParameter}}
			{{#isFormParameter}}
			  {{#isSingleton}}
        form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
        if ({{&camelCaseName}} !== undefined) {
            form['{{&name}}'] = {{&camelCaseName}};
        }
			  {{/isSingleton}}
			{{/isFormParameter}}
{{/parameters}}
        let uri = `{{&backTickPath}}`;

        return this.http
            .{{angular2httpMethod}}(this.domain + uri{{#hasPayload}}, JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasPayload}}, { headers: headers, search: queryParameters })
            .map((res: Response) => {
            return res;
        });
    }

{{/methods}}

}
